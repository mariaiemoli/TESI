\chapter{Introduzione} \label{cap:Introduzione}
%---------------------------------------------------------------------------------------------%
%Definizione dell'intestazione dei capitoli
%---------------------------------------------------------------------------------------------%
\lhead[\fancyplain{}{\footnotesize{Capitolo \thechapter}}]{}
\rhead[]{\fancyplain{}{\footnotesize{\leftmark}}}
\lfoot[\fancyplain{}{\bf \thepage}]{}
\cfoot{} %per lasciare vuoto il piè di pagina centrale
\rfoot[]{\fancyplain{}{\bf \thepage}}
%---------------------------------------------------------------------------------------------%

Negli ultimi anni il mercato degli smartphone ha subito una rapida evoluzione che ha condotto a porre attenzione sia all'hardware che al software utilizzato da questi dispositivi, al fine di migliorare le prestazioni e far apprezzare sempre più il prodotto ai clienti di questo vasto mercato. Android, iOS e Windows rappresentano le principali piattaforme smartphone esistenti nel mondo del mobile, ciascuna caratterizzata dalla propria architettura, sulla base della quale i programmatori si adattano nello sviluppo delle loro applicazioni. All'interno delle grandi software-house aumentano i team di sviluppo di applicazioni mobili native, ciascuno dei quali specializzato nella produzione di applicazioni mobili per una particolare piattaforma, con strumenti e linguaggi di programmazione specifici. Quindi, nel caso in cui si ritenesse necessaria la progettazione di una stessa applicazione per sistemi operativi differenti, in aggiunta al necessario coinvolgimento di più team di sviluppo, si corre il rischio che i diversi team producano applicazioni che discostano molto l'una dall'altra, quando invece è richiesta una corrispondenza a livello di funzionalità e di interfaccia grafica. 
\\\\
Per le applicazioni web e per i software sviluppati in un linguaggio di programmazione ad oggetti, lungo gli anni, sono emersi diverse metodologie di sviluppo, strumenti e linguaggi di modellazione che si sono ormai consolidati come standard. Tra i più noti si trova l'Unified Modeling Language, un linguaggio di modellazione e progettazione basato sul paradigma object-oriented, dal quale derivano altri linguaggi usati nella modellazione del software, come SysML, un linguaggio general-purpose di modellazione visuale per la rappresentazione di sistemi complessi, e WebML, il linguaggio di specifica per le applicazioni web data-intensive. Per quanto riguarda le applicazioni mobili, invece, mancano strumenti specifici di supporto alla fase di progettazione e design. Tuttavia sono nate diverse piattaforme di sviluppo cross-platform, ciascuna con i suoi strumenti e linguaggi di programmazione, con l'obiettivo di sviluppare l'applicazione una sola volta ed eseguirla su più piattaforme. Un approccio di questo genere può portare numerosi benefici, ma non mancano le limitazioni, per esempio quelle che che riguardano le basse performance di esecuzione, l'impossibilità di sfruttare completamente l'hardware del dispositivo e il discostamento dell'interfaccia grafica da quella tipica delle applicazioni native.
\\\\
Il presente lavoro di tesi si inserisce quindi in questo nuovo contesto, e mira a presentare una soluzione di modellazione che possa supportare la fase di progettazione di applicazioni mobili, indipendentemente dalla specifica piattaforma per cui vengono sviluppate. Verrà presentato in particolare uno strumento software da noi sviluppato che introduce un approccio model-driven all'implementazione di applicazioni mobili native. Esso consente infatti la definizione di un modello dell'applicazione desiderata e, a partire da questo, permette di generare automaticamente i sorgenti Android e iOS corrispondenti.\\
Per supportare la fase di modellazione, siamo partiti dalla definizione di un metamodello astratto, basato sull'estensione di UML e le cui istanze costituiscono modelli ad alto livello di applicazioni mobili qualsiasi, per poi creare una versione più concreta, chiamata metamodello implementativo, finalizzata alla definizione di un modello dettagliato dell'applicazione. Relativamente alla generazione di codice, invece, ci siamo concentrati sulla produzione dei sorgenti per le piattaforme Android e iOS, in quanto rappresentano le piattaforme che attualmente dominano il mercato dei dispositivi mobili. Tuttavia il metamodello può essere adattato ad una qualsiasi altra piattaforma introducendo delle regole di traduzione anche per essa.
\\\\
La scelta di procedere in questo modo è stata portata avanti con l'obiettivo di definire uno strumento in grado di supportare i diversi team di sviluppo nella fase di progettazione. Quest'ultimi, sfruttando il metamodello astratto, hanno infatti la possibilità di appoggiarsi ad uno strumento di facile comprensione, per collaborare e interagire con chiunque intervenga nello sviluppo dell'applicazione, compreso il cliente. Definendo un'istanza della versione implementativa del metamodello gli sviluppatori possono ottenere i sorgenti nativi corrispondenti per le diverse piattaforme, a partire dai quali possono completare lo sviluppo dell'applicazione implementando le parti mancanti. 
\\\\
Il lavoro svolto può essere suddiviso in quattro fasi: una prima fase, molto generale, riguardante la definizione del metamodello astratto; una seconda fase in cui si è reso necessario manipolare il primo metamodello per costruirne uno nuovo, più concreto (il metamodello implementativo), finalizzato alla definizione di un'istanza che costituisse il modello vero e proprio dell'applicazione desiderata; una terza fase, molto pratica, finalizzata alla produzione del codice necessario alla traduzione del modello dell'applicazione nei corrispettivi sorgenti nativi; infine una quarta fase in cui viene valutato il contributo del lavoro nell'ambito dello sviluppo delle applicazioni mobili.\\
Sebbene il metamodello astratto sia stato definito con lo scopo di fornire una soluzione ad alto livello al problema della mancanza di uno strumento o linguaggio di supporto alla fase di modellazione di applicazioni mobili, il metamodello implementativo e il traduttore del modello in codice vengono introdotti con lo scopo di presentare un approccio di sviluppo alternativo a quello cross-platform, che possa supportare quello classico finalizzato allo sviluppo parallelo della stessa applicazione per le diverse piattaforme mobili.
\\\\
Di seguito è riportata una breve descrizione del contenuto di ciascun capitolo della tesi:
\begin{itemize}
\item Il {\itshape secondo capitolo} presenta gli approcci esistenti allo sviluppo di applicazioni mobili, in particolare quello classico che conduce alla produzione di applicazioni native e le varie forme di approccio cross-platform, riportando per ciascuno di essi benefici e limitazioni. Inoltre descrive i metamodelli specifici delle applicazioni Windows Phone 7 e Android, ripresi dallo stato dell'arte.
\item Il {\itshape terzo capitolo} presenta il metamodello astratto, che riproduce la struttura delle applicazioni mobili. In quanto basato sul linguaggio UML, verranno descritti alcuni dei concetti UML esistenti e ne saranno introdotti dei nuovi. Infine a titolo d'esempio riporta un'istanza del metamodello.
\item Il {\itshape quarto capitolo} illustra il metamodello implementativo, che si presenta come evoluzione del metamodello astratto, fornendo una descrizione dettagliata per ciascuno dei suoi componenti.
\item Il {\itshape quinto capitolo} descrive gli strumenti e le tecnologie sfruttati nella fase di definizione del generatore di codice e presenta la struttura del progetto realizzato. Inoltre descrive le regole, le convenzioni e le notazioni da adottare nell'utilizzo del generatore di codice e spiega quale sia l'output della fase di traduzione del modello dell'applicazione nei sorgenti corrispondenti.
\item Il {\itshape sesto capitolo} fornisce una valutazione quantitativa e qualitativa del lavoro di tesi, e in particolare del generatore di codice. Al fine di ottenere dei dati per l'analisi quantitativa abbiamo sviluppato e analizzato due semplici applicazioni. Per l'analisi qualitativa abbiamo considerato, invece, un'applicazione di media complessità presente sul mercato. Grazie agli esempi presentati, al termine del capitolo risulterà chiaro come utilizzare lo strumento software per definire il modello dell'applicazione.
\item Il {\itshape settimo capitolo} riporta le considerazioni finali sul lavoro svolto e illustra i possibili sviluppi futuri.
\end{itemize}