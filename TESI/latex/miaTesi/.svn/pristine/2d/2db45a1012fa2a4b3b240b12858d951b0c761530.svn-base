\chapter {Conclusioni}  \label{cap:Conclusioni}
%---------------------------------------------------------------------------------------------%
%Definizione dell'intestazione dei capitoli
%---------------------------------------------------------------------------------------------%
\lhead[\fancyplain{}{\footnotesize{Capitolo \thechapter}}]{}
\rhead[]{\fancyplain{}{\footnotesize{\leftmark}}}
\lfoot[\fancyplain{}{\bf \thepage}]{}
\cfoot{} %per lasciare vuoto il piè di pagina centrale
\rfoot[]{\fancyplain{}{\bf \thepage}}
%---------------------------------------------------------------------------------------------%

Il lavoro svolto nel corso della tesi ha riguardato in particolare lo sviluppo di due metamodelli, astratto e implementativo, di supporto alla fase di design di applicazioni mobili, e la produzione di uno strumento che prende in input il modello dell'applicazione e produce in output i sorgenti Android e iOS corrispondenti. Per quanto riguarda Android, i template sono stati definiti per produrre applicazioni compatibili con qualsiasi smartphone con livello API minimo pari a 8 e scegliendo come target il livello API 17, per iOS invece i template sono stati definiti in modo da produrre applicazioni compatibili con iPhone e iPod Touch, scegliendo come target la versione 6 di iOS.
\\\\
Lo sviluppo del metamodello astratto è stato svolto considerando sempre l'obiettivo di creare uno strumento generale che potesse risultare utile nella progettazione di qualsiasi applicazione mobile, mentre per quanto riguarda la generazione dei sorgenti abbiamo posto l'attenzione sulle due piattaforme attualmente più diffuse, cercando di tradurre ogni elemento modellato in pezzi di codice che, in un'ottica Model-View-Controller, tendano a coprire il più possibile la parte di controllo, ovvero di logica applicativa. Abbiamo preferito non concentrarci particolarmente sulla definizione della grafica dell'applicazione, che nei casi Android e iOS può essere facilmente definita attraverso gli editor grafici messi a disposizione dai rispettivi ambienti di sviluppo Eclipse e Xcode. Per la parte View ci siamo quindi limitati a generare i file necessari alla definizione di una grafica essenziale, dove gli elementi dell'interfaccia utente vengono disposti linearmente nel layout dei ViewController. \\
Come abbiamo avuto modo di capire nel capitolo relativo alla valutazione, l'utilizzo del generatore di codice permette comunque in generale di coprire buona parte delle righe di codice necessarie allo sviluppo completo di un'applicazione, presentandosi come alternativa all'approccio cross-platform, di cui si parla molto negli ultimi anni nonostante le limitazioni che lo caratterizzano.
\\\\
Sebbene il metamodello astratto possa presentarsi come uno strumento completo, il metamodello implementativo e il generatore di codice in generale richiedono uno studio e una revisione continua nel tempo, in quanto sono strettamente legati all'aggiornamento delle versioni delle piattaforme supportate, che per ora sono Android e iOS, ma che in futuro potrebbero comprenderne delle nuove. L'aggiornamento costante dello strumento è indispensabile per produrre applicazioni compatibili con le nuove versioni dei vari sistemi operativi: la struttura modulare del progetto di tesi, che permette di individuare immediatamente tutti i segmenti di codice che mappano uno specifico componente del metamodello sui sorgenti da generare, è stata definita appositamente per venire incontro a esigenze di questo tipo. La necessità di un aggiornamento continuo negli anni del progetto potrebbe costituire uno dei principali ostacoli al suo utilizzo in futuro, ma le valutazioni svolte nella fase finale del lavoro di tesi mostrano la possibilità di trarre dei benefici importanti sia dall'utilizzo dei metamodelli sia da quello del generatore di codice, entrambi intesi come utili strumenti di supporto allo sviluppo di un'applicazione per dispositivi mobili.

\section{Sviluppi Futuri}
L'ambito entro cui è stato portato avanti il lavoro di tesi è relativamente nuovo e sono numerosi gli sviluppi futuri che potrebbero ampliare il nostro progetto. Per questo motivo, per entrambe le fasi di modellazione e implementazione del lavoro di tesi, abbiamo scelto di utilizzare linguaggi e tecnologie standard. Quindi la definizione dei due metamodelli è basata sull'estensione del linguaggio UML, mentre per definire lo strumento di generazione del codice abbiamo sfruttato i framework EMF e oAW, che sono comunemente utilizzati nel contesto dello sviluppo di software model-driven.
\\\\
Innanzitutto, per entrambe le fasi di modellazione e generazione di codice, si potrebbe valutare la possibilità di supportare anche la piattaforma Windows Phone 8, che costituisce il terzo player nel mercato degli smartphone, o qualcuna delle altre piattaforme esistenti, seppur meno diffuse.\\
Inoltre, nel quarto capitolo di questo documento abbiamo visto che alcuni degli elementi concreti definiti nel metamodello astratto non sono stati inclusi nel metamodello implementativo per diversi motivi, quindi si potrebbe proseguire con l'implementazione degli elementi mancanti, eventualmente riconsiderando anche gli elementi del metamodello già mappati nel codice. \\
Un ulteriore sviluppo potrebbe riguardare l'estensione dei dispositivi supportati dalle applicazioni prodotte col generatore di codice. Infatti, come anticipato in precedenza, abbiamo dato priorità alla produzione di applicazioni compatibili con smartphone, considerando secondari dispositivi come tablet e iPad, che potrebbero essere supportati in futuro. \\
Infine, utilizzando gli strumenti messi a disposizione dal framework GMF, si potrebbe pensare di rivedere e migliorare la veste grafica del generatore di codice, che attualmente mostra l'editor grafico standard di EMF. L'idea potrebbe essere quella di definire un editor grafico articolato, che possa essere di grande aiuto anche alla modellazione, per l'applicazione che si intende realizzare, di un'interfaccia grafica personalizzata e che non si limiti quindi solo a permettere la definizione degli elementi grafici da inserire nei ViewController.